# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
commands:
  print_pipeline_id:
       steps:
         - run: "echo $CIRCLE_WORKFLOW_ID"
   # Exercise - Rollback
  destroy_environment:
     steps:
       - run:
           name: Destroy environment
           # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
           # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
           when: on_fail
           command: |
               aws cloudformation delete-stack \
               --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
               --region us-east-1

jobs:

  create_infrastructure: 
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Create Cloudformation Stack
            command: |
              aws cloudformation deploy \
                --template-file template.yml \
                --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
                --region us-east-1
  #configure_infrastructure: 
  #docker:
   # - image: python:3.7-alpine3.11
   #steps:
    #- checkout
    #- add_ssh_keys:
            # You can get this ID in the section where you registered the SSH Key
     
     #       fingerprints: 
      #        - "ca:fe:eb:61:28:a6:90:92:e8:4a:1d:88:f6:5b:2d:9d"
       #       - "3d:47:17:9e:95:97:00:a0:57:b2:aa:ee:df:cb:77:2d"
    #- run:
     #   name: Install Ansible
      #  command: apk add --update ansible
  
    
    #- run:
     #   name: Run Playbook and Configure server
      #  command: ansible-playbook -i inventory -vvv main_remote.yml ##--private-key udacity.pem
  create_and_deploy_front_end:
    docker:
    - image: amazon/aws-cli
    steps:
     - checkout
     - run:
        name: Execute bucket.yml - Create Cloudformation Stack
        command: |
          aws cloudformation deploy \
          --template-file bucket.yml \
          --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
          --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}" \
          --region us-east-1

    # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
     - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete   --region us-east-1
  

  # Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
   docker:
    - image: amazon/aws-cli
   steps:
    - checkout
    - run: yum install -y tar gzip
    - run:
        name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
        command: |
          aws cloudformation \
          list-exports --query "Exports[?Name==\`PipelineID\`].Value"  --region us-east-1 \
          --no-paginate --output text > ~/textfile.txt  

    - persist_to_workspace:
        root: ~/
        paths: 
          - textfile.txt 
  # Executes the cloudfront.yml template that will modify the existing CloudFront Distribution, change its target from the old bucket to the new bucket - `mybucket-${CIRCLE_WORKFLOW_ID:0:7}`. 
# Notice here we use the stack name `production-distro` which is the same name we used while deploying to the S3 bucket manually.
  promote_to_production:
   docker:
    - image: amazon/aws-cli
   steps:
    - checkout
    - run:
        name: Execute cloudfront.yml
        command: |
          aws cloudformation deploy \
          --template-file cloudfront.yml \
          --stack-name production-distro \
          --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}" \
          --region us-east-1

  # Destroy the previous production version's S3 bucket and CloudFormation stack. 
  clean_up_old_front_end:
   docker:
    - image: amazon/aws-cli
   steps:
    - checkout
    - run: yum install -y tar gzip
    - attach_workspace:
        at: ~/
    - run:
        name: Destroy the previous S3 bucket and CloudFormation stack. 
        # Use $OldBucketID environment variable or mybucket644752792305 below.
        # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
        command: |
          export OldBucketID=$(cat ~/textfile.txt)
          aws s3 rm "s3://${OldBucketID}" --recursive
  smoke_test:
   docker:
    - image: amazon/aws-cli
   steps:
    - run: apt-get add --update curl
    - run:
        name: smoke test
        command: |
          return 1
    - destroy_environment
    #command: ansible-playbook -i inventory main_remote.yml
      # Your command
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  aws-cli:
      jobs:
       - create_and_deploy_front_end
       - promote_to_production:
            requires: 
              - create_and_deploy_front_end
       - get_last_deployment_id
       - clean_up_old_front_end:
            requires:
              - get_last_deployment_id
              - promote_to_production


 